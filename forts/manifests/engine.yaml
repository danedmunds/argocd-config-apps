apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDSUg1WEU1L1R3VGh6bkkxenIvcGM4RGdzVUpLa0xrN0x3bHd4YzhPaXhzZnllMUZNdDNRR2oKQmZjcEFlUVh0WldnQndZRks0RUVBQ0toWkFOaUFBU1ErSVJkSWs1RFVWSlc4THQrVWgzV2xsZ2pHakhYUmZJKwphTkJjbU00MW5Zd1JsSHZhZFVHeDVHWnFtRmY0ZzdNdjY3RlI2b3lJdFJEbVB0dDlRT0RtMkJQeUEzYWZ1UE5wCm9QRWM2RExnTzl0dHJZVEhXT2tlY0hZL1pPYnFIMm89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: engine-service-jwt-secret
type: Opaque
---
apiVersion: v1
data:
  jwtPrivateKey: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRDSUg1WEU1L1R3VGh6bkkxenIvcGM4RGdzVUpLa0xrN0x3bHd4YzhPaXhzZnllMUZNdDNRR2oKQmZjcEFlUVh0WldnQndZRks0RUVBQ0toWkFOaUFBU1ErSVJkSWs1RFVWSlc4THQrVWgzV2xsZ2pHakhYUmZJKwphTkJjbU00MW5Zd1JsSHZhZFVHeDVHWnFtRmY0ZzdNdjY3RlI2b3lJdFJEbVB0dDlRT0RtMkJQeUEzYWZ1UE5wCm9QRWM2RExnTzl0dHJZVEhXT2tlY0hZL1pPYnFIMm89Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K
kind: Secret
metadata:
  name: engine-secrets
type: Opaque
---
apiVersion: v1
data:
  rules.yaml: |
    - allow: |
        # If app or QV app has originAppId and user is publisher in a managed space user can republish
        resource.IsAppOrQvApp() and resource.UserIsPublisherInManagedSpace() and resource.originAppId == app.id and resource._actions={"republish"}
        # Professional user can create an app in a personal space or in a shared space where the user is an editor.
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedInPersonalOrSharedSpace() and resource._actions={"create"}
        # A user can delete app or QlikView app if the user is the owner in a personal space or in a shared space where the user is producer. A tenant admin can always delete an app
        resource.IsAppOrQvApp() and (resource.IsOwnedInPersonalSpace() or resource.UserIsEditorInSharedSpace() or resource.UserIsFacilitatorInManagedSpace()) and !resource.IsPublished() and resource._actions={"delete"}
        # A professional user can copy an app or QV app if he is copying it to a personal space or a shared space where the user is producer. Read access on the src file is implicit
        resource.IsAppOrQvApp() and user.IsProfessional() and resource.IsOwnedInPersonalOrSharedSpace() and !resource.IsPublished() and resource._actions={"duplicate"}
        # A professional user can import an app if the user is importing to a personal space or to a shared space where the user is producer.
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedInPersonalOrSharedSpace() and resource._actions={"import"}
        # The app can be opened in a personal space by the owner.
        resource.IsApp() and user.HasLicense() and resource.IsOwnedInPersonalSpace() and resource._actions={"read"}
        # A tenant admin can open all apps.
        resource.IsApp() and user.IsTenantAdmin() and resource._actions={"read"}
        # A tenant admin can delete all apps and QlikView apps.
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource._actions={"delete"}
        # A tenant admin can change the owner and export personal apps or QlikView apps.
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource.MissingOrEmptyProp(spaceId) and !resource.IsPublished() and resource._actions={"change_owner","export"}
        # A tenant admin can change the owner on apps and QlikView apps in a shared space
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource.IsShared() and resource._actions={"change_owner"}
        # A tenant admin can change space on a published app or QlikView app in a managed space
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource.IsPublished() and resource.IsManaged() and resource._actions={"change_space"}
        # A tenant admin can change space on distributed and private apps and QlikView apps.
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource.MissingOrEmptyProp(spaceId) and resource._actions={"change_space"}
        # A tenant admin can change space on apps and QlikView apps in non existing space.
        resource.IsAppOrQvApp() and user.IsTenantAdmin() and resource.IsInNonExistingSpace() and resource._actions={"change_space"}
        # A user can open apps that the user has access to in a shared space
        resource.IsApp() and user.HasLicense() and resource.UserIsSharedSpaceMember() and resource._actions={"read"}
        # A user can open apps that the user has access to in a managed space
        resource.IsApp() and user.HasLicense() and (resource.UserIsViewerInManagedSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"read"}
        # Professional user that owns the app can edit scripts and reload and use the app as data source if it's a personal space.
        resource.IsApp() and user.IsProfessional() and resource.IsOwnedInPersonalSpace() and !resource.IsPublished() and resource._actions={"reload","source"}
        # Professional user can edit scripts and reload the app if the user is an editor in the shared space
        resource.IsApp() and user.IsProfessional() and resource.UserIsEditorInSharedSpace() and !resource.IsPublished() and resource._actions={"reload"}
        # Professional user can do binary loads from apps located in a shared space if the user is an editor
        resource.IsAppOrQvApp() and user.IsProfessional() and resource.UserIsEditorInSharedSpace() and !resource.IsPublished() and resource._actions={"source"}
        # Professional user can reload the app if the user is facilitator in a managed space
        resource.IsApp() and user.IsProfessional() and resource.UserIsFacilitatorInManagedSpace() and !resource.IsPublished() and resource._actions={"reload"}
        # Professional user can update app attributes on app or QV app if the user is facilitator in a managed space
        resource.IsAppOrQvApp() and user.IsProfessional() and resource.UserIsFacilitatorInManagedSpace() and !resource.IsPublished() and resource._actions={"update"}
        # A user can update app attributes on apps and QV apps in a shared space as producer.
        resource.IsAppOrQvApp() and resource.UserIsEditorInSharedSpace() and !resource.IsPublished() and resource._actions={"update"}
        # A user can update app attributes on personal apps and QV apps.
        resource.IsAppOrQvApp() and resource.IsOwnedInPersonalSpace() and !resource.IsPublished() and resource._actions={"update"}
        # A facilitator can change the owner of an app and a QlikView app in a shared space.
        resource.IsAppOrQvApp() and resource.UserIsFacilitator() and resource._actions={"change_owner"}
        # A user can change the space on personal apps and QlikView apps or as editor of shared apps.
        resource.IsAppOrQvApp() and resource.IsOwnedInPersonalOrSharedSpace() and resource.MissingOrEmptyProp(originAppId) and !resource.IsPublished() and resource._actions={"change_space"}
        # A user can change the space as facilitator in managed apps and QlikView apps.
        resource.IsAppOrQvApp() and resource.UserIsFacilitatorInManagedSpace() and !resource.MissingOrEmptyProp(originAppId) and !resource.IsPublished() and resource._actions={"change_space"}
        # A publisher can publish an app or a QlikView app to a managed space.
        resource.IsAppOrQvApp() and resource.UserIsPublisherInManagedSpace() and resource._actions={"publish"}
        # Impersonator from the ODAG service can change owner. This rule will be removed when odag does not need to impersonate
        resource.IsApp() and user.act.sub == "odag" and resource._actions={"read","change_owner"}
        # Impersonator from the Data condition Evaluator service can create session apps. This rule will be changed when session apps are it's own resource type
        resource.IsApp() and user.act.sub == "data-condition-evaluator" and resource._actions={"create","reload"}
        # Impersonator from the Data condition Evaluator service can update the script in owned personal apps.
        resource.IsAppObject() and user.act.sub == "data-condition-evaluator" and resource.IsOwnedInPersonalSpace() and resource.IsScriptObject() and resource._actions={"read","update"}
        # A user can export apps that the user owns or in a shared space as producer. Only user visable (objects and data) will be exported
        resource.IsApp() and !resource.HasSectionAccess() and resource.HasPrivilege("read") and resource.IsOwnedInPersonalOrSharedSpace() and !resource.IsPublished() and resource._actions={"export"}
        # A user can take apps offline if user is offline enabled or app is private
        resource.IsApp() and resource.HasPrivilege("read") and (resource.IsOwnedInPersonalSpace() or resource.UserIsOfflineEnabled()) and resource._actions={"export_reduced"}
        # Professional user can import an appobject if the user is importing to a personal space or to a shared space where the user is a producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.IsOwnedInPersonalOrSharedSpace() and resource._actions={"import"}
        # In apps that the user has read access to, the user can read all published objects and his personal objects and all master items.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and ((resource.IsOwnedByMe() or resource.IsPublished() or resource.IsMasterObject() or resource.IsPublicObject()) and !resource.IsScriptObject()) and resource._actions={"read"}
        # A professional user can read the script in owned personal apps or as editor in a shared space, or as facilitator in managed space.
        resource.IsAppObject() and user.IsProfessional() and (resource.app.IsOwnedInPersonalOrSharedSpace() or resource.app.UserIsFacilitatorInManagedSpace()) and resource.IsScriptObject() and resource._actions={"read"}
        # A Tenant admin in an Expired tenant can read all scripts.
        resource.IsAppObject() and user.IsTenantAdminExpiredLicense() and resource.IsScriptObject() and resource._actions={"read"}
        # A professional user can update the script in owned personal apps or owned apps in a shared space.
        resource.IsAppObject() and user.IsProfessional() and (resource.app.IsOwnedInPersonalSpace() or (resource.app.UserIsEditorInSharedSpace() and resource.IsOwnedByMe())) and resource.IsScriptObject() and resource._actions={"update"}
        # A professional user can create any object in an unpublished app that is in a personal space or in a shared space as producer
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsOwnedInPersonalOrSharedSpace() and resource.IsOwnedByMe() and resource._actions={"create"}
        # In apps that a user has read access to, a professional user can update, delete master objects and other public objects.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and (resource.IsMasterObject() or resource.IsPublicObject()) and resource.app.IsOwnedInPersonalOrSharedSpace() and resource._actions={"update","delete"}
        # In apps that a user has update access to, the user can update app properties.
        resource.IsAppObject() and resource.app.HasPrivilege("update") and resource._objecttype == "appprops" and resource._actions={"update"}
        # A professional user can update and delete any unpublished object in an unpublished app that the user owns or in a shared space as producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and resource.app.IsOwnedInPersonalOrSharedSpace() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # A professional user can publish objects in an unpublished app that the user owns or in a shared space as producer.
        resource.IsAppObject() and user.IsProfessional() and resource.app.HasPrivilege("read") and !resource.app.IsPublished() and resource.app.IsOwnedInPersonalOrSharedSpace() and !resource.IsScriptObject() and resource._actions={"publish"}
        # A user can create a story object (stories, bookmarks and snapshot) in a shared space where the user is a consumer.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and resource.app.UserIsSharedSpaceMember() and resource.IsStoryObject() and !resource.IsPublished() and resource._actions={"create"}
        # A user can update and delete an owned personal story object (stories, bookmarks and snapshot) in a shared space where the user is a consumer.
        resource.IsAppObject() and resource.app.HasPrivilege("read") and resource.app.UserIsSharedSpaceMember() and resource.IsStoryObject() and !resource.IsPublished()  and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # A user can create and read an alert bookmark if user has access to app.
        resource.IsAlertBookmark() and resource.app.HasPrivilege("read") and resource._actions={"read","create"}
        # A user can update and delete an owned alert bookmark if user has access to app.
        resource.IsAlertBookmark() and resource.app.HasPrivilege("read") and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # A user can duplicate objects if the user has duplicate access on the app
        resource.IsAppObject() and resource.app.HasPrivilege("duplicate") and resource.app.IsOwnedInPersonalOrSharedSpace() and resource._actions={"duplicate"}
        # Analyser users can create app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and resource.app.UserIsViewerInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsStoryObject() and !resource.IsPublished() and resource._actions={"create"}
        # Analyser users can update, duplicate and delete owned, unpublished app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and resource.app.UserIsViewerInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsStoryObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","duplicate","delete"}
        # Professional users can create app objects of type sheets, stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and resource._actions={"create"}
        # Professional users can update and delete owned, unpublished app objects of type sheets, stories, snapshot and bookmarks in managed apps that allows self service
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and !resource.IsPublished() and resource.IsOwnedByMe() and resource._actions={"update","delete"}
        # Professional users can publish and unpublish app objects of type sheets, stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and user.IsProfessional() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsContentObject() and resource.IsOwnedByMe() and !resource.IsApproved() and resource._actions={"publish"}
        # Analyzer users can publish and unpublish app objects of type stories, snapshot and bookmarks in managed apps
        resource.IsAppObject() and user.IsAnalyzer() and resource.app.UserIsContributorInManagedSpace() and resource.app.HasPrivilege("read") and resource.IsStoryObject() and resource.IsOwnedByMe() and !resource.IsApproved() and resource._actions={"publish"}
        # External services can read, import, create, update, and delete apps.
        resource.IsAppOrAppObject() and user.IsExternal() and resource._actions={"read","import","create","update","delete"}
        # Professional user can use an app or QlikView app as data source if the user is data consumer in a space
        resource.IsAppOrQvApp() and user.IsProfessional() and resource.UserIsDataConsumerInSpace() and resource._actions={"source"}
        # Professional user that owns the app can use the QlikView app as data source if it's a personal space.
        resource.IsQvApp() and user.IsProfessional() and resource.IsOwnedInPersonalSpace() and !resource.IsPublished() and resource._actions={"source"}
        # A professional user shall be able to upload a QlikView app
        resource.IsQvApp() and user.IsQvEnabled() and user.IsProfessional() and resource.IsOwnedInPersonalSpace() and resource._actions={"import"}
        # External services shall have full access to QlikView apps
        resource.IsQvApp() and user.IsExternal() and resource._actions={"read","import","create","update","delete"}
        # The QlikView app can be opened in a personal space by the owner.
        resource.IsQvApp() and user.IsQvEnabled() and user.HasLicense() and resource.IsOwnedInPersonalSpace() and resource._actions={"read"}
        # A tenant admin can open all QlikView apps
        resource.IsQvApp() and user.IsQvEnabled() and user.IsTenantAdmin() and resource._actions={"read"}
        # A user can open QlikView apps that the user has access to in a managed space
        resource.IsQvApp() and user.IsQvEnabled() and user.HasLicense() and (resource.UserIsViewerInManagedSpace() or resource.UserIsFacilitatorInManagedSpace()) and resource._actions={"read"}
        # A shared space member user can open QlikView apps in a shared space
        resource.IsQvApp() and user.IsQvEnabled() and user.HasLicense() and resource.UserIsSharedSpaceMember() and resource._actions={"read"}
        # A shared space editor professional user can import QlikView apps to a shared space
        resource.IsQvApp() and user.IsQvEnabled() and user.IsProfessional() and resource.UserIsEditorInSharedSpace() and resource._actions={"import"}
        # If you have access to the QlikView app you can read all objects
        resource.IsQvAppObject() and resource.app.HasPrivilege("read") and !resource.IsScriptObject() and resource._actions={"read"}
        # On global API:s we allow read to everyone
        resource._resourcetype="node" and resource._actions={"read"}
        # On global API:s with reload access professional users should have access
        resource._resourcetype="node" and user.IsProfessional() and resource._actions={"reload"}
      deny: ""
      func: |
        # User is a professional user.
        IsProfessional() (self._provision.accesstype == "professional")
        # User is an analyzer user.
        IsAnalyzer() (self._provision.accesstype == "analyzer")
        # User has valid license.
        HasLicense() (self.IsProfessional() or self.IsAnalyzer())
        # User is a service user (external).
        IsExternal() (self.subType == "externalClient")
        # User is a tenant administrator.
        IsTenantAdmin() (self.roles =="TenantAdmin")
        # User is a tenant administrator with expired license.
        IsTenantAdminExpiredLicense() (self.roles =="TenantAdmin" and self._provision.status == "expired")
        # Checks parent app privileges. Privileges on parent must currently be computed in a first pass.
        app.HasPrivilege(x) (self.app._privileges == x)
        # Checks if a privilege exists on a resource.
        HasPrivilege(x) (self._actions.Matched () = x)
        # Resource is published.
        IsPublished() (self.published == "true")
        # App has Section Access.
        HasSectionAccess() (self.hassectionaccess == "true")
        # Helper macro for detecting if a property is missing or empty string.
        MissingOrEmptyProp(prop) (self.prop.empty() or self.prop == "")
        # In managed space
        IsManaged() (self.spaceId == space.id and space.type == "managed")
        # In shared space
        IsShared() (self.spaceId == space.id and space.type == "shared")
        # Resource is approved.
        IsApproved() (self.approved = "true")
        # Resource is owned by user.
        IsOwnedByMe() (user.subType == "user" and self.ownerId == user.userId)
        # Is app object a master item.
        IsMasterObject() (self._objecttype = { "masterobject", "dimension", "measure" })
        # Is app object a story item.
        IsStoryObject() (self._objecttype = { "story", "snapshot", "bookmark" })
        # Is app object a content item (sheet, story, snapshot, bookmark).
        IsContentObject() (self._objecttype = {"sheet", "story", "snapshot", "bookmark" })
        # Is app object an alert bookmark.
        IsAlertBookmark() (self._resourcetype=="app.object" and self._objecttype=="alertbookmark")
        # Public objects created outside of sheets
        IsPublicObject() (self._objecttype = { "appprops", "colormap", "odagapplink", "loadmodel", "dynamicappview", "businessmodel", "businessvocabulary", "annotations", "directquerymodel"})
        # Is it the script object.
        IsScriptObject() (self._objecttype = "app_appscript")
        # Is user an editor in the space this resource belongs to. Producers are the roles produce or facilitator (space owner is automatically a facilitator)
        UserIsEditorInSharedSpace() (self.spaceId == space.id and space.type == "shared" and (space.roles == {"producer", "facilitator"} or user.userId == space.ownerId))
        # Is is a consumer in a shared space
        UserIsConsumerInSharedSpace() (self.spaceId == space.id and space.type == "shared" and space.roles == {"consumer"})
        # User is an offline enabled user in a space
        UserIsOfflineEnabled() (self.spaceId == space.id and space.roles == {"offlineUser"})
        # Is user the owner of this personal space.
        IsOwnedInPersonalSpace() (self.IsOwnedByMe() and self.MissingOrEmptyProp(spaceId))
        # Is user member of a shared space that the resource belongs to.
        UserIsSharedSpaceMember() (self.spaceId == space.id and space.type == "shared" and (space.roles == {"consumer", "producer", "facilitator"} or user.userId == space.ownerId))
        # User can publish to a managed space if he has the role publisher or he is the owner of the space.
        UserIsPublisherInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"publisher"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsViewerInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"consumer", "contributor", "facilitator"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsFacilitatorInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is user member of a managed space that the resource belongs to.
        UserIsContributorInManagedSpace() (self.spaceId == space.id and space.type == "managed" and (space.roles == {"contributor", "facilitator"} or user.userId == space.ownerId))
        # Is user a facilitator on the space this resource belongs to.
        UserIsFacilitator() (self.spaceId == space.id and space.type == {"shared", "managed"} and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is owned in personal space or editor in shared space.
        IsOwnedInPersonalOrSharedSpace() (self.IsOwnedInPersonalSpace() or self.UserIsEditorInSharedSpace())
        # Is in a non existing space.
        IsInNonExistingSpace() (!self.MissingOrEmptyProp(spaceId) and !(self.spaceId == space.id))
        # Is app.
        IsApp() (self._resourcetype=={"app"})
        # Is app or QlikView app.
        IsAppOrQvApp() (self._resourcetype=={"app", "qvapp"})
        # Is app object.
        IsAppObject() (self._resourcetype=={"app.object"})
        # Is app or app object.
        IsAppOrAppObject() (self._resourcetype=={"app", "app.object"})
        # Is QlikView enabled.
        IsQvEnabled() (self._provision.qvEnabled == "true")
        # Is a QlikView app.
        IsQvApp() (self._resourcetype=={"qvapp"})
        # Is a QlikView app object.
        IsQvAppObject() (self._resourcetype=={"qvapp.object"})
        # Is datafile.
        IsDataFile() (self._resourcetype=={"datafile"})
        # Is data connection.
        IsDataConnections() (self._resourcetype=={"dataconnections"})
        # User is a data integration administrator.
        IsDataIntegrator() (self.roles =="DataIntegrator")
        # In Data Integration space
        ProInDISpace() (resource.spaceId == space.id and space.type =="dataintegration" and self.IsProfessional())
        # Users who have full access (except editing) in DI space
        HasFullAccessDiSpace() (self.IsTenantAdmin() or (self.ProInDISpace() and (self.IsDataIntegrator() or space.roles == {"facilitator"} or self.userId == space.ownerId)))
        # Users who have list and read access in DI space
        HasListReadAccessDiSpace() (self.ProInDISpace() and (space.roles == {"producer", "dataconsumer"}))
        # Users who have list only access in DI space
        HasListAccessDiSpace() (self.ProInDISpace() and (space.roles == {"consumer", "operator"}))
        # Is user a facilitator in the shared space this resource belongs to.
        UserIsFacilitatorInSharedSpace() (self.spaceId == space.id and space.type == {"shared"} and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is nfs connection.
        IsNfsConnection() (self._resourcetype=={"nfsConnection"})
        # User is a data consumer.
        UserIsDataConsumerInSpace() (self.spaceId == space.id and space.roles == {"dataconsumer"})
        # Is GenericLink.
        IsGenericLink() (self._resourcetype=={"genericlink"})
        # Is SharingService.
        IsSharingService() (self._resourcetype=={"sharingservice"})
        # Is SharingServiceTask.
        IsSharingServiceTask() (self._resourcetype=={"sharingservicetask"})
        # Is InsightLink.
        IsInsightLink() (self._resourcetype=={"insightlink"})
        # Is SharingServiceAlertingTask.
        IsSharingServiceAlertingTask() (self._resourcetype=={"sharingservicealertingtask"})
        # Is NotificationChannel.
        IsNotificationChannel() (self._resourcetype=={"notificationchannel"})
        # Is Condition.
        IsCondition() (self._resourcetype=={"condition"})
        # Is ConditionEvaluation.
        IsConditionEvaluation() (self._resourcetype=={"conditionevaluation"})
        # Is user can edit in the space this resource belongs to. (space owner has all roles)
        UserIsCanEditInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"producer"} or user.userId == space.ownerId))
        # Is user can view  in the space this resource belongs to. (space owner has all roles)
        UserIsCanViewInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"consumer"} or user.userId == space.ownerId))
        # Is user can manage in the space this resource belongs to. (space owner has all roles)
        UserIsCanManageInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"facilitator"} or user.userId == space.ownerId))
        # Is user can operate editor in the space this resource belongs to. (space owner has all roles)
        UserIsCanOperateInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"operator"} or user.userId == space.ownerId))
        # Is user can consume in the space this resource belongs to. (space owner has all roles)
        UserIsCanConsumeDataInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"dataconsumer"} or user.userId == space.ownerId))
        # Is user can publish in the space this resource belongs to. (space owner has all roles)
        UserIsCanPublishDataInDataIntegrationSpace() (self.spaceId == space.id and space.type == "dataintegration" and (space.roles == {"publisher"} or user.userId == space.ownerId))
        # Resource is DIApp
        IsDIApp() (self._resourcetype == "diapp")
        # Resource is Resource Connection
        IsResourceConnection() (self._resourcetype == "resourceconnection")
        # Resource is Catalog Object Data Store
        IsCatalogObjectDataStore() (self._resourcetype == "datastore")
        # Resource is Catalog Object Data Asset
        IsCatalogObjectDataAsset() (self._resourcetype == "dataasset")
        # Resource is Catalog Object Data Set
        IsCatalogObjectDataSet() (self._resourcetype == "dataset")
        # Resource is Catalog Object
        IsCatalogObject() (self.IsCatalogObjectDataStore() or self.IsCatalogObjectDataAsset() or self.IsCatalogObjectDataSet())
        # Resource is Catalog Object
        IsDataResource() (self.IsResourceConnection())
        # If resource is in a space in a dataintegration space
        IsInDataintegrationSpace() (space.type=="dataintegration" and self.spaceid==space.id)
        # Is AlertingTaskRecipients.
        IsAlertingTaskRecipients() (self._resourcetype=={"alertingtaskrecipients"})
kind: ConfigMap
metadata:
  name: engine-engine-rules-cm
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: engine
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 5Gi
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: engine
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine
spec:
  ports:
    - name: engine
      port: 9076
      protocol: TCP
  selector:
    app: engine
    release: engine
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization
    nginx.ingress.kubernetes.io/auth-url: http://edge-auth.$(NAMESPACE).svc.cluster.local:8080/v1/auth
    nginx.ingress.kubernetes.io/configuration-snippet: |
      rewrite (?i)/api/(.*) /$1 break;
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: 500m
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.org/client-max-body-size: 500m
  labels:
    app: engine
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine
spec:
  rules:
    - http:
        paths:
          - backend:
              service:
                name: engine
                port:
                  number: 9076
            path: /api/v1/apps/import
            pathType: Prefix
          - backend:
              service:
                name: engine
                port:
                  number: 9076
            path: /api/v1/apps
            pathType: Prefix
          - backend:
              service:
                name: engine
                port:
                  number: 9076
            path: /api/engine/openapi
            pathType: Prefix
          - backend:
              service:
                name: engine
                port:
                  number: 9076
            path: /api/engine/openrpc
            pathType: Prefix
          - backend:
              service:
                name: engine
                port:
                  number: 9076
            path: /api/engine/asyncapi
            pathType: Prefix
---
apiVersion: qixengine.qlik.com/v1
kind: Engine
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-default
spec:
  controller: Deployment
  engineVariantName: engine-variant-qliksense
  labels:
    qlik.com/default: "true"
  replicas: 1
---
apiVersion: qixengine.qlik.com/v1
kind: Engine
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-qlikview-default
spec:
  controller: Deployment
  engineVariantName: engine-variant-qlikview
  labels:
    qlik.com/default: "true"
  replicas: 1
---
apiVersion: qixengine.qlik.com/v1
kind: Engine
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-oape-reload
spec:
  annotations:
    qixengine.qlik.com/one-app-per-engine: "true"
    qixengine.qlik.com/workload-types: reload
  controller: Deployment
  engineVariantName: sense-reload-engine-variant
  maxReplicas: 10
  minReplicas: 1
  replicas: 1
---
apiVersion: qixengine.qlik.com/v1
kind: EngineTemplate
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-template-default
spec:
  annotations:
    prometheus.io/job: engine
    prometheus.io/port: "9090"
    prometheus.io/scrape: "true"
  labels:
    app: engine
    chart: engine-12.1426.0
    engine-nats-client: "true"
    metricsPort: "9090"
    qix-engine: qix-engine
    qix-engine-version: 12.1426.0
    qlik.com/engine-deployment-name: engine-template-default
    qlik.com/engine-type: qliksense
    release: engine
    servicePort: "9076"
  podSpec:
    containers:
      - args:
          - -S
          - BasePathPrefix=/api
          - -S
          - CheckMemSizeQuotaOnImport=1
          - -S
          - ConcurrentImportLimit=7
          - -S
          - ContinueOngoingReloadsWhenSuspending=1
          - -S
          - DeepTraceReload=1
          - -S
          - DocumentDirectory=/qlik/apps
          - -S
          - DropLineageInfo=0
          - -S
          - EnableGetFieldResourceId=1
          - -S
          - EnableIPv6Support=0
          - -S
          - EnableQvwRestImport=1
          - -S
          - EnableWebSocketIdleManagement=1
          - -S
          - FolderConnectionInterface=0
          - -S
          - PingIntervalSec=30
          - -S
          - ShutdownWait=1
          - -S
          - TempContentServiceTimeoutMs=30000
          - -S
          - AcceptEULA=$(ACCEPT_EULA)
          - -S
          - ExternalHttpMetrics=1
          - -S
          - PrometheusServicePort=9090
          - -S
          - QvLogMetrics=1
          - -S
          - DesktopPort=9076
          - -S
          - AuditLogVerbosity=0
          - -S
          - EnableExtServiceLogs=1
          - -S
          - EventBusLogVerbosity=4
          - -S
          - ExternalServicesLogVerbosity=4
          - -S
          - HttpTrafficLogVerbosity=4
          - -S
          - PerformanceLogVerbosity=0
          - -S
          - QixPerformanceLogVerbosity=0
          - -S
          - QvLogTelTraceId=1
          - -S
          - SSEVerbosity=4
          - -S
          - ScriptLogVerbosity=4
          - -S
          - SessionLogVerbosity=4
          - -S
          - SmartSearchIndexLogVerbosity=3
          - -S
          - SmartSearchQueryLogVerbosity=3
          - -S
          - SystemLogVerbosity=4
          - -S
          - TrafficLogVerbosity=0
          - -S
          - RestServiceRequestNbrOfRetries=5
          - -S
          - Autosave=1
          - -S
          - AutosaveInterval=5
          - -S
          - AWSLogVerbosity=2
          - -S
          - S3CredentialProvider=environment
          - -S
          - S3EndpointOverride=http://minio:9000/
          - -S
          - UseAwsS3=1
          - -S
          - UseObjectStoragePurger=1
          - -S
          - JWKSServiceUrl=http://keys:8080/v1/keys/qlik.api.internal
          - -S
          - ValidateJsonWebTokens=2
          - -S
          - EnableRenewUserToken=1
          - -S
          - InternalTokenServiceUrl=http://edge-auth:8080/v1
          - -S
          - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
          - -S
          - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
          - -S
          - EnableABAC=1
          - -S
          - EnableAccessControlTrace=1
          - -S
          - Gen3=1
          - -S
          - PersistenceMode=2
          - -S
          - SystemRules=/etc/config/rules.yaml
          - -S
          - ConnectivityServiceUrl=http://data-connections:9011
          - -S
          - ConnectorGetDataRetryCount=3
          - -S
          - DataConnectorServiceUrl=http://dcaas:9026
          - -S
          - EnableDataConnectivityService=1
          - -S
          - EnableGrpcFileStreamConnector=1
          - -S
          - HostedFileRetryCount=3
          - -S
          - SSEPlugin=endpoints,ml-endpoints:50055,,20,2000;GeoOperations,geo-operations:50072;qlikml,ml-sse:50055
          - -S
          - LimitCoresForced=0
          - -S
          - LicenseCacheTimeoutSeconds=3600
          - -S
          - LicenseServiceUrl=http://licenses:9200
          - -S
          - EnableSpaces=1
          - -S
          - SpacesServiceUrl=http://spaces:6080
          - -S
          - EnableEncryptData=1
          - -S
          - EncryptionServiceUrl=http://encryption:8080
          - -S
          - UseEncryptionService=1
          - -S
          - EnableFeatureFlagService=1
          - -S
          - FeatureFlagServiceUrl=http://feature-flags:8080
          - -S
          - PASRulesTags=common|app
          - -S
          - PASServiceUrl=http://policy-administrations:7070
          - -S
          - EnableGroupsService=1
          - -S
          - GroupsServiceUrl=http://identities:8080
          - -S
          - EnableAppExport=1
          - -S
          - EnableDownloadFromTCS=1
          - -S
          - EnableResumableUpload=1
          - -S
          - EnableTempContentService=1
          - -S
          - TempContentServiceUrl=http://temporary-contents:6080
          - -S
          - DirectQueryWorkload=2
          - -S
          - EventBusSubscribe=1
          - -S
          - STANCluster=messaging-nats-streaming-cluster
          - -S
          - STANMaxReconnect=24
          - -S
          - STANReconnectWait=5
          - -S
          - STANTimeout=10
          - -S
          - STANTrace=1
          - -S
          - STANUrl=nats://messaging-nats-client:4222
          - -S
          - STANUseToken=1
          - -S
          - SendAppObjectEvents=1
          - -S
          - StatisticsEventIntervalMs=1000
          - -S
          - UseEventBus=1
          - -S
          - UseSTAN=1
          - -S
          - UseStatisticsEventProducer=1
          - -S
          - EnvironmentName="example"
          - -S
          - RegionName="example"
          - -S
          - DocumentTimeout=60
          - -S
          - SessionTimeoutSec=1200
        env:
          - name: PROMETHEUS_PORT
            value: "9090"
          - name: GRPC_DNS_RESOLVER
            value: native
          - name: SSL_CERT_FILE
            value: /etc/ssl/certs/ca-certificates.crt
          - name: JAEGER_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: OTLP_AGENT_HOST
            valueFrom:
              fieldRef:
                fieldPath: status.hostIP
          - name: OTLP_AGENT_PORT
            value: "55680"
          - name: HTTP_PROXY
            valueFrom:
              configMapKeyRef:
                key: httpProxy
                name: qliksense-configs
          - name: HTTPS_PROXY
            valueFrom:
              configMapKeyRef:
                key: httpsProxy
                name: qliksense-configs
          - name: NO_PROXY
            valueFrom:
              configMapKeyRef:
                key: noProxy
                name: qliksense-configs
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                key: mongodbUri
                name: qliksense-secrets
          - name: MONGODB_URI_FILE
            value: /run/secrets/qlik.com/qliksense/mongodbUri
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                key: redisPassword
                name: qliksense-secrets
          - name: REDIS_PASSWORD_FILE
            value: /run/secrets/qlik.com/qliksense/redisPassword
        image: ghcr.io/qlik-download/engine:12.1426.0
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /health
            port: 9076
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 10
        name: engine
        ports:
          - containerPort: 9076
          - containerPort: 9090
            name: metrics
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /ready
            port: 9076
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
        startupProbe:
          failureThreshold: 12
          httpGet:
            path: /health
            port: 9076
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 10
        volumeMounts:
          - mountPath: /qlik/apps
            name: apps-storage
          - mountPath: /etc/secrets
            name: secrets
            readOnly: true
          - mountPath: /etc/config
            name: rules-volume
          - mountPath: /home/engine/Qlik/Sense
            name: storagepath
          - mountPath: /tmp
            name: tmpdir
          - mountPath: /etc/ssl/certs
            name: ca-certificates
          - mountPath: /run/secrets/qlik.com/qliksense
            name: qliksense-secrets
    dnsConfig:
      options:
        - name: timeout
          value: "1"
        - name: single-request-reopen
    imagePullSecrets:
      - name: artifactory-docker-secret
    terminationGracePeriodSeconds: 30
    volumes:
      - name: apps-storage
        persistentVolumeClaim:
          claimName: engine
      - name: secrets
        secret:
          secretName: engine-secrets
      - configMap:
          defaultMode: 493
          name: engine-prestop-hook
          optional: true
        name: engine-prestop-hook
      - configMap:
          name: engine-engine-rules-cm
        name: rules-volume
      - emptyDir: {}
        name: storagepath
      - emptyDir: {}
        name: tmpdir
      - name: ca-certificates
        persistentVolumeClaim:
          claimName: ca-certificates
      - name: qliksense-secrets
        secret:
          secretName: qliksense-secrets
---
apiVersion: qixengine.qlik.com/v1
kind: EngineVariant
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-variant-qliksense
spec:
  args:
    - -S
    - BasePathPrefix=/api
    - -S
    - CheckMemSizeQuotaOnImport=1
    - -S
    - ConcurrentImportLimit=7
    - -S
    - ContinueOngoingReloadsWhenSuspending=1
    - -S
    - DeepTraceReload=1
    - -S
    - DocumentDirectory=/qlik/apps
    - -S
    - DropLineageInfo=0
    - -S
    - EnableGetFieldResourceId=1
    - -S
    - EnableIPv6Support=0
    - -S
    - EnableQvwRestImport=1
    - -S
    - EnableWebSocketIdleManagement=1
    - -S
    - FolderConnectionInterface=0
    - -S
    - PingIntervalSec=30
    - -S
    - ShutdownWait=1
    - -S
    - TempContentServiceTimeoutMs=30000
    - -S
    - AcceptEULA=$(ACCEPT_EULA)
    - -S
    - ExternalHttpMetrics=1
    - -S
    - PrometheusServicePort=9090
    - -S
    - QvLogMetrics=1
    - -S
    - DesktopPort=9076
    - -S
    - AuditLogVerbosity=0
    - -S
    - EnableExtServiceLogs=1
    - -S
    - EventBusLogVerbosity=4
    - -S
    - ExternalServicesLogVerbosity=4
    - -S
    - HttpTrafficLogVerbosity=4
    - -S
    - PerformanceLogVerbosity=0
    - -S
    - QixPerformanceLogVerbosity=0
    - -S
    - QvLogTelTraceId=1
    - -S
    - SSEVerbosity=4
    - -S
    - ScriptLogVerbosity=4
    - -S
    - SessionLogVerbosity=4
    - -S
    - SmartSearchIndexLogVerbosity=3
    - -S
    - SmartSearchQueryLogVerbosity=3
    - -S
    - SystemLogVerbosity=4
    - -S
    - TrafficLogVerbosity=0
    - -S
    - RestServiceRequestNbrOfRetries=5
    - -S
    - Autosave=1
    - -S
    - AutosaveInterval=5
    - -S
    - AWSLogVerbosity=2
    - -S
    - S3CredentialProvider=environment
    - -S
    - S3EndpointOverride=http://minio:9000/
    - -S
    - UseAwsS3=1
    - -S
    - UseObjectStoragePurger=1
    - -S
    - JWKSServiceUrl=http://keys:8080/v1/keys/qlik.api.internal
    - -S
    - ValidateJsonWebTokens=2
    - -S
    - EnableRenewUserToken=1
    - -S
    - InternalTokenServiceUrl=http://edge-auth:8080/v1
    - -S
    - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
    - -S
    - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
    - -S
    - EnableABAC=1
    - -S
    - EnableAccessControlTrace=1
    - -S
    - Gen3=1
    - -S
    - PersistenceMode=2
    - -S
    - SystemRules=/etc/config/rules.yaml
    - -S
    - ConnectivityServiceUrl=http://data-connections:9011
    - -S
    - ConnectorGetDataRetryCount=3
    - -S
    - DataConnectorServiceUrl=http://dcaas:9026
    - -S
    - EnableDataConnectivityService=1
    - -S
    - EnableGrpcFileStreamConnector=1
    - -S
    - HostedFileRetryCount=3
    - -S
    - SSEPlugin=endpoints,ml-endpoints:50055,,20,2000;GeoOperations,geo-operations:50072;qlikml,ml-sse:50055
    - -S
    - LimitCoresForced=0
    - -S
    - LicenseCacheTimeoutSeconds=3600
    - -S
    - LicenseServiceUrl=http://licenses:9200
    - -S
    - EnableSpaces=1
    - -S
    - SpacesServiceUrl=http://spaces:6080
    - -S
    - EnableEncryptData=1
    - -S
    - EncryptionServiceUrl=http://encryption:8080
    - -S
    - UseEncryptionService=1
    - -S
    - EnableFeatureFlagService=1
    - -S
    - FeatureFlagServiceUrl=http://feature-flags:8080
    - -S
    - PASRulesTags=common|app
    - -S
    - PASServiceUrl=http://policy-administrations:7070
    - -S
    - EnableGroupsService=1
    - -S
    - GroupsServiceUrl=http://identities:8080
    - -S
    - EnableAppExport=1
    - -S
    - EnableDownloadFromTCS=1
    - -S
    - EnableResumableUpload=1
    - -S
    - EnableTempContentService=1
    - -S
    - TempContentServiceUrl=http://temporary-contents:6080
    - -S
    - DirectQueryWorkload=2
    - -S
    - EventBusSubscribe=1
    - -S
    - STANCluster=messaging-nats-streaming-cluster
    - -S
    - STANMaxReconnect=24
    - -S
    - STANReconnectWait=5
    - -S
    - STANTimeout=10
    - -S
    - STANTrace=1
    - -S
    - STANUrl=nats://messaging-nats-client:4222
    - -S
    - STANUseToken=1
    - -S
    - SendAppObjectEvents=1
    - -S
    - StatisticsEventIntervalMs=1000
    - -S
    - UseEventBus=1
    - -S
    - UseSTAN=1
    - -S
    - UseStatisticsEventProducer=1
    - -S
    - EnvironmentName="example"
    - -S
    - RegionName="example"
    - -S
    - DocumentTimeout=60
    - -S
    - SessionTimeoutSec=1200
  engineTemplateName: engine-template-default
  image: ghcr.io/qlik-download/engine:12.1426.0
  labels:
    qlik.com/engine-type: qliksense
---
apiVersion: qixengine.qlik.com/v1
kind: EngineVariant
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-variant-qlikview
spec:
  annotations:
    prometheus.io/job: engine-qlikview
  args:
    - -S
    - BasePathPrefix=/api
    - -S
    - CheckMemSizeQuotaOnImport=1
    - -S
    - ConcurrentImportLimit=7
    - -S
    - ContinueOngoingReloadsWhenSuspending=1
    - -S
    - DeepTraceReload=1
    - -S
    - DocumentDirectory=/qlik/apps
    - -S
    - DropLineageInfo=0
    - -S
    - EnableGetFieldResourceId=1
    - -S
    - EnableIPv6Support=0
    - -S
    - EnableQvwRestImport=1
    - -S
    - EnableWebSocketIdleManagement=1
    - -S
    - FolderConnectionInterface=0
    - -S
    - PingIntervalSec=30
    - -S
    - ShutdownWait=1
    - -S
    - TempContentServiceTimeoutMs=30000
    - -S
    - AcceptEULA=$(ACCEPT_EULA)
    - -S
    - ExternalHttpMetrics=1
    - -S
    - PrometheusServicePort=9090
    - -S
    - QvLogMetrics=1
    - -S
    - DesktopPort=9076
    - -S
    - AuditLogVerbosity=0
    - -S
    - EnableExtServiceLogs=1
    - -S
    - EventBusLogVerbosity=4
    - -S
    - ExternalServicesLogVerbosity=4
    - -S
    - HttpTrafficLogVerbosity=4
    - -S
    - PerformanceLogVerbosity=0
    - -S
    - QixPerformanceLogVerbosity=0
    - -S
    - QvLogTelTraceId=1
    - -S
    - SSEVerbosity=4
    - -S
    - ScriptLogVerbosity=4
    - -S
    - SessionLogVerbosity=4
    - -S
    - SmartSearchIndexLogVerbosity=3
    - -S
    - SmartSearchQueryLogVerbosity=3
    - -S
    - SystemLogVerbosity=4
    - -S
    - TrafficLogVerbosity=0
    - -S
    - RestServiceRequestNbrOfRetries=5
    - -S
    - Autosave=1
    - -S
    - AutosaveInterval=5
    - -S
    - AWSLogVerbosity=2
    - -S
    - S3CredentialProvider=environment
    - -S
    - S3EndpointOverride=http://minio:9000/
    - -S
    - UseAwsS3=1
    - -S
    - UseObjectStoragePurger=1
    - -S
    - JWKSServiceUrl=http://keys:8080/v1/keys/qlik.api.internal
    - -S
    - ValidateJsonWebTokens=2
    - -S
    - EnableRenewUserToken=1
    - -S
    - InternalTokenServiceUrl=http://edge-auth:8080/v1
    - -S
    - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
    - -S
    - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
    - -S
    - EnableABAC=1
    - -S
    - EnableAccessControlTrace=1
    - -S
    - Gen3=1
    - -S
    - PersistenceMode=2
    - -S
    - SystemRules=/etc/config/rules.yaml
    - -S
    - ConnectivityServiceUrl=http://data-connections:9011
    - -S
    - ConnectorGetDataRetryCount=3
    - -S
    - DataConnectorServiceUrl=http://dcaas:9026
    - -S
    - EnableDataConnectivityService=1
    - -S
    - EnableGrpcFileStreamConnector=1
    - -S
    - HostedFileRetryCount=3
    - -S
    - SSEPlugin=endpoints,ml-endpoints:50055,,20,2000;GeoOperations,geo-operations:50072;qlikml,ml-sse:50055
    - -S
    - LimitCoresForced=0
    - -S
    - LicenseCacheTimeoutSeconds=3600
    - -S
    - LicenseServiceUrl=http://licenses:9200
    - -S
    - EnableSpaces=1
    - -S
    - SpacesServiceUrl=http://spaces:6080
    - -S
    - EnableEncryptData=1
    - -S
    - EncryptionServiceUrl=http://encryption:8080
    - -S
    - UseEncryptionService=1
    - -S
    - EnableFeatureFlagService=1
    - -S
    - FeatureFlagServiceUrl=http://feature-flags:8080
    - -S
    - PASRulesTags=common|app
    - -S
    - PASServiceUrl=http://policy-administrations:7070
    - -S
    - EnableGroupsService=1
    - -S
    - GroupsServiceUrl=http://identities:8080
    - -S
    - EnableAppExport=1
    - -S
    - EnableDownloadFromTCS=1
    - -S
    - EnableResumableUpload=1
    - -S
    - EnableTempContentService=1
    - -S
    - TempContentServiceUrl=http://temporary-contents:6080
    - -S
    - DirectQueryWorkload=2
    - -S
    - EventBusSubscribe=1
    - -S
    - STANCluster=messaging-nats-streaming-cluster
    - -S
    - STANMaxReconnect=24
    - -S
    - STANReconnectWait=5
    - -S
    - STANTimeout=10
    - -S
    - STANTrace=1
    - -S
    - STANUrl=nats://messaging-nats-client:4222
    - -S
    - STANUseToken=1
    - -S
    - SendAppObjectEvents=1
    - -S
    - StatisticsEventIntervalMs=1000
    - -S
    - UseEventBus=1
    - -S
    - UseSTAN=1
    - -S
    - UseStatisticsEventProducer=1
    - -S
    - EnvironmentName="example"
    - -S
    - RegionName="example"
    - -S
    - DocumentTimeout=60
    - -S
    - SessionTimeoutSec=1200
    - -S
    - BasicQlikviewEnabled=1
    - -S
    - BundledContentsRootFolder=/usr/local/share/Bundled
    - -S
    - SkiaFontPaths=/usr/share/fonts
  engineTemplateName: engine-template-default
  image: ghcr.io/qlik-download/engine-qv:12.1426.0
  labels:
    qlik.com/engine-type: qlikview
---
apiVersion: qixengine.qlik.com/v1
kind: EngineVariant
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: sense-reload-engine-variant
spec:
  annotations:
    prometheus.io/job: engine-reload
  args:
    - -S
    - BasePathPrefix=/api
    - -S
    - CheckMemSizeQuotaOnImport=1
    - -S
    - ConcurrentImportLimit=7
    - -S
    - ContinueOngoingReloadsWhenSuspending=1
    - -S
    - DeepTraceReload=1
    - -S
    - DocumentDirectory=/qlik/apps
    - -S
    - DropLineageInfo=0
    - -S
    - EnableGetFieldResourceId=1
    - -S
    - EnableIPv6Support=0
    - -S
    - EnableQvwRestImport=1
    - -S
    - EnableWebSocketIdleManagement=1
    - -S
    - FolderConnectionInterface=0
    - -S
    - PingIntervalSec=30
    - -S
    - ShutdownWait=1
    - -S
    - TempContentServiceTimeoutMs=30000
    - -S
    - AcceptEULA=$(ACCEPT_EULA)
    - -S
    - ExternalHttpMetrics=0
    - -S
    - PrometheusServicePort=9090
    - -S
    - QvLogMetrics=0
    - -S
    - DesktopPort=9076
    - -S
    - AuditLogVerbosity=0
    - -S
    - EnableExtServiceLogs=1
    - -S
    - EventBusLogVerbosity=4
    - -S
    - ExternalServicesLogVerbosity=4
    - -S
    - HttpTrafficLogVerbosity=4
    - -S
    - PerformanceLogVerbosity=0
    - -S
    - QixPerformanceLogVerbosity=0
    - -S
    - QvLogTelTraceId=1
    - -S
    - SSEVerbosity=4
    - -S
    - ScriptLogVerbosity=4
    - -S
    - SessionLogVerbosity=4
    - -S
    - SmartSearchIndexLogVerbosity=3
    - -S
    - SmartSearchQueryLogVerbosity=3
    - -S
    - SystemLogVerbosity=4
    - -S
    - TrafficLogVerbosity=0
    - -S
    - RestServiceRequestNbrOfRetries=5
    - -S
    - Autosave=1
    - -S
    - AutosaveInterval=5
    - -S
    - AWSLogVerbosity=2
    - -S
    - S3CredentialProvider=environment
    - -S
    - S3EndpointOverride=http://minio:9000/
    - -S
    - UseAwsS3=1
    - -S
    - UseObjectStoragePurger=1
    - -S
    - JWKSServiceUrl=http://keys:8080/v1/keys/qlik.api.internal
    - -S
    - ValidateJsonWebTokens=2
    - -S
    - EnableRenewUserToken=1
    - -S
    - InternalTokenServiceUrl=http://edge-auth:8080/v1
    - -S
    - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
    - -S
    - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
    - -S
    - EnableABAC=1
    - -S
    - EnableAccessControlTrace=1
    - -S
    - Gen3=1
    - -S
    - PersistenceMode=2
    - -S
    - SystemRules=/etc/config/rules.yaml
    - -S
    - ConnectivityServiceUrl=http://data-connections:9011
    - -S
    - ConnectorGetDataRetryCount=3
    - -S
    - DataConnectorServiceUrl=http://dcaas:9026
    - -S
    - EnableDataConnectivityService=1
    - -S
    - EnableGrpcFileStreamConnector=1
    - -S
    - HostedFileRetryCount=3
    - -S
    - SSEPlugin=endpoints,ml-endpoints:50055,,20,2000;GeoOperations,geo-operations:50072;qlikml,ml-sse:50055
    - -S
    - LimitCoresForced=0
    - -S
    - LicenseCacheTimeoutSeconds=3600
    - -S
    - LicenseServiceUrl=http://licenses:9200
    - -S
    - EnableSpaces=1
    - -S
    - SpacesServiceUrl=http://spaces:6080
    - -S
    - EnableEncryptData=1
    - -S
    - EncryptionServiceUrl=http://encryption:8080
    - -S
    - UseEncryptionService=1
    - -S
    - EnableFeatureFlagService=1
    - -S
    - FeatureFlagServiceUrl=http://feature-flags:8080
    - -S
    - PASRulesTags=common|app
    - -S
    - PASServiceUrl=http://policy-administrations:7070
    - -S
    - EnableGroupsService=1
    - -S
    - GroupsServiceUrl=http://identities:8080
    - -S
    - EnableAppExport=1
    - -S
    - EnableDownloadFromTCS=1
    - -S
    - EnableResumableUpload=1
    - -S
    - EnableTempContentService=1
    - -S
    - TempContentServiceUrl=http://temporary-contents:6080
    - -S
    - DirectQueryWorkload=2
    - -S
    - EventBusSubscribe=0
    - -S
    - STANCluster=messaging-nats-streaming-cluster
    - -S
    - STANMaxReconnect=24
    - -S
    - STANReconnectWait=5
    - -S
    - STANTimeout=10
    - -S
    - STANTrace=1
    - -S
    - STANUrl=nats://messaging-nats-client:4222
    - -S
    - STANUseToken=1
    - -S
    - SendAppObjectEvents=1
    - -S
    - StatisticsEventIntervalMs=15000
    - -S
    - UseEventBus=1
    - -S
    - UseSTAN=1
    - -S
    - UseStatisticsEventProducer=1
    - -S
    - EnvironmentName="example"
    - -S
    - RegionName="example"
    - -S
    - DocumentTimeout=60
    - -S
    - SessionTimeoutSec=1200
  engineTemplateName: engine-template-default
  image: ghcr.io/qlik-download/engine:12.1426.0
  labels:
    qlik.com/engine-type: qliksense
---
apiVersion: qixengine.qlik.com/v1
kind: EngineVariant
metadata:
  labels:
    chart: engine-12.1426.0
    heritage: Helm
    release: engine
  name: engine-variant-direct-query
spec:
  annotations:
    prometheus.io/job: engine-direct-query
  args:
    - -S
    - BasePathPrefix=/api
    - -S
    - CheckMemSizeQuotaOnImport=1
    - -S
    - ConcurrentImportLimit=7
    - -S
    - ContinueOngoingReloadsWhenSuspending=1
    - -S
    - DeepTraceReload=1
    - -S
    - DocumentDirectory=/qlik/apps
    - -S
    - DropLineageInfo=0
    - -S
    - EnableGetFieldResourceId=1
    - -S
    - EnableIPv6Support=0
    - -S
    - EnableQvwRestImport=1
    - -S
    - EnableWebSocketIdleManagement=1
    - -S
    - FolderConnectionInterface=0
    - -S
    - PingIntervalSec=30
    - -S
    - ShutdownWait=1
    - -S
    - TempContentServiceTimeoutMs=30000
    - -S
    - AcceptEULA=$(ACCEPT_EULA)
    - -S
    - ExternalHttpMetrics=1
    - -S
    - PrometheusServicePort=9090
    - -S
    - QvLogMetrics=1
    - -S
    - DesktopPort=9076
    - -S
    - AuditLogVerbosity=0
    - -S
    - EnableExtServiceLogs=1
    - -S
    - EventBusLogVerbosity=4
    - -S
    - ExternalServicesLogVerbosity=4
    - -S
    - HttpTrafficLogVerbosity=4
    - -S
    - PerformanceLogVerbosity=0
    - -S
    - QixPerformanceLogVerbosity=0
    - -S
    - QvLogTelTraceId=1
    - -S
    - SSEVerbosity=4
    - -S
    - ScriptLogVerbosity=4
    - -S
    - SessionLogVerbosity=4
    - -S
    - SmartSearchIndexLogVerbosity=3
    - -S
    - SmartSearchQueryLogVerbosity=3
    - -S
    - SystemLogVerbosity=4
    - -S
    - TrafficLogVerbosity=0
    - -S
    - RestServiceRequestNbrOfRetries=5
    - -S
    - Autosave=1
    - -S
    - AutosaveInterval=5
    - -S
    - AWSLogVerbosity=2
    - -S
    - S3CredentialProvider=environment
    - -S
    - S3EndpointOverride=http://minio:9000/
    - -S
    - UseAwsS3=1
    - -S
    - UseObjectStoragePurger=1
    - -S
    - JWKSServiceUrl=http://keys:8080/v1/keys/qlik.api.internal
    - -S
    - ValidateJsonWebTokens=2
    - -S
    - EnableRenewUserToken=1
    - -S
    - InternalTokenServiceUrl=http://edge-auth:8080/v1
    - -S
    - JWTSignPrivateKeyId=$(TOKEN_AUTH_PRIVATE_KEY_ID)
    - -S
    - JWTSignPrivateKeyPath=/etc/secrets/jwtPrivateKey
    - -S
    - EnableABAC=1
    - -S
    - EnableAccessControlTrace=1
    - -S
    - Gen3=1
    - -S
    - PersistenceMode=2
    - -S
    - SystemRules=/etc/config/rules.yaml
    - -S
    - ConnectivityServiceUrl=http://data-connections:9011
    - -S
    - ConnectorGetDataRetryCount=3
    - -S
    - DataConnectorServiceUrl=http://dcaas:9026
    - -S
    - EnableDataConnectivityService=1
    - -S
    - EnableGrpcFileStreamConnector=1
    - -S
    - HostedFileRetryCount=3
    - -S
    - SSEPlugin=endpoints,ml-endpoints:50055,,20,2000;GeoOperations,geo-operations:50072;qlikml,ml-sse:50055
    - -S
    - LimitCoresForced=0
    - -S
    - LicenseCacheTimeoutSeconds=3600
    - -S
    - LicenseServiceUrl=http://licenses:9200
    - -S
    - EnableSpaces=1
    - -S
    - SpacesServiceUrl=http://spaces:6080
    - -S
    - EnableEncryptData=1
    - -S
    - EncryptionServiceUrl=http://encryption:8080
    - -S
    - UseEncryptionService=1
    - -S
    - EnableFeatureFlagService=1
    - -S
    - FeatureFlagServiceUrl=http://feature-flags:8080
    - -S
    - PASRulesTags=common|app
    - -S
    - PASServiceUrl=http://policy-administrations:7070
    - -S
    - EnableGroupsService=1
    - -S
    - GroupsServiceUrl=http://identities:8080
    - -S
    - EnableAppExport=1
    - -S
    - EnableDownloadFromTCS=1
    - -S
    - EnableResumableUpload=1
    - -S
    - EnableTempContentService=1
    - -S
    - TempContentServiceUrl=http://temporary-contents:6080
    - -S
    - DirectQueryWorkload=1
    - -S
    - EventBusSubscribe=1
    - -S
    - STANCluster=messaging-nats-streaming-cluster
    - -S
    - STANMaxReconnect=24
    - -S
    - STANReconnectWait=5
    - -S
    - STANTimeout=10
    - -S
    - STANTrace=1
    - -S
    - STANUrl=nats://messaging-nats-client:4222
    - -S
    - STANUseToken=1
    - -S
    - SendAppObjectEvents=1
    - -S
    - StatisticsEventIntervalMs=1000
    - -S
    - UseEventBus=1
    - -S
    - UseSTAN=1
    - -S
    - UseStatisticsEventProducer=1
    - -S
    - EnvironmentName="example"
    - -S
    - RegionName="example"
    - -S
    - DocumentTimeout=60
    - -S
    - SessionTimeoutSec=1200
  engineTemplateName: engine-template-default
  image: ghcr.io/qlik-download/engine:12.1426.0
  labels:
    qlik.com/engine-type: direct-query
